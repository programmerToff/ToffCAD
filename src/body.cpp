#include "body.h"

std::string saveFileDialog() {
	// Use Windows API to open Save As dialog
	CoInitializeEx(NULL, COINIT_APARTMENTTHREADED | COINIT_DISABLE_OLE1DDE);
	IFileSaveDialog* pFileSave;

	// Create the FileSaveDialog object
	if (SUCCEEDED(CoCreateInstance(CLSID_FileSaveDialog, NULL, CLSCTX_ALL, IID_IFileSaveDialog, reinterpret_cast<void**>(&pFileSave)))) {
		// Show the dialog
		if (SUCCEEDED(pFileSave->Show(NULL))) {
			// Get the result
			IShellItem* pItem;
			if (SUCCEEDED(pFileSave->GetResult(&pItem))) {
				PWSTR pszFilePath;
				// Get the file path
				if (SUCCEEDED(pItem->GetDisplayName(SIGDN_FILESYSPATH, &pszFilePath))) {
					std::wstring wsFilePath(pszFilePath);
					CoTaskMemFree(pszFilePath);
					pItem->Release();
					pFileSave->Release();
					CoUninitialize();

					// Convert wide string to narrow string
					return std::string(wsFilePath.begin(), wsFilePath.end());
				}
				pItem->Release();
			}
		}
		pFileSave->Release();
	}
	CoUninitialize();

	return "";  // Return an empty string if the user cancels the dialog or an error occurs
}

void getNormal(float normal[3], float p1[3], float p2[3], float p3[3])
{
	float v1[3] = { p2[0] - p1[0],p2[1] - p1[1],p2[2] - p1[2] };
	float v2[3] = { p3[0] - p1[0],p3[1] - p1[1],p3[2] - p1[2] };
	normal[0] = v1[1] * v2[2] - v1[2] * v2[1];
	normal[1] = v1[2] * v2[0] - v1[0] * v2[2];
	normal[2] = v1[0] * v2[1] - v1[1] * v2[0];
	return;
}

void addVertex(std::vector<float>& v, float x, float y, float z)
{
	v.push_back(x);
	v.push_back(y);
	v.push_back(z);
	v.push_back(0.0f);
	v.push_back(0.4f);
	v.push_back(0.0f);
}

void addTriangle(std::vector<GLuint>& v, GLuint p1, GLuint p2, GLuint p3)
{
	v.push_back(p1);
	v.push_back(p2);
	v.push_back(p3);
}

std::string openExplorerDialog() {
	// Use Windows API to open Explorer dialog
	CoInitializeEx(NULL, COINIT_APARTMENTTHREADED | COINIT_DISABLE_OLE1DDE);
	IFileOpenDialog* pFileOpen;

	// Create the FileOpenDialog object
	if (SUCCEEDED(CoCreateInstance(CLSID_FileOpenDialog, NULL, CLSCTX_ALL, IID_IFileOpenDialog, reinterpret_cast<void**>(&pFileOpen)))) {
		// Show the dialog
		if (SUCCEEDED(pFileOpen->Show(NULL))) {
			// Get the result
			IShellItem* pItem;
			if (SUCCEEDED(pFileOpen->GetResult(&pItem))) {
				PWSTR pszFilePath;
				// Get the file path
				if (SUCCEEDED(pItem->GetDisplayName(SIGDN_FILESYSPATH, &pszFilePath))) {
					// Convert wide string to narrow string
					int bufferSize = WideCharToMultiByte(CP_UTF8, 0, pszFilePath, -1, nullptr, 0, nullptr, nullptr);
					std::string filePath(bufferSize, '\0');
					WideCharToMultiByte(CP_UTF8, 0, pszFilePath, -1, &filePath[0], bufferSize, nullptr, nullptr);

					CoTaskMemFree(pszFilePath);
					pItem->Release();
					pFileOpen->Release();
					CoUninitialize();
					return filePath;
				}
				pItem->Release();
			}
		}
		pFileOpen->Release();
	}
	CoUninitialize();

	return "";
}

void bodies::addCube()
{
	Body Cube(0);
	addVertex(Cube.verts, 1.0f, 0.0f, 1.0f);
	addVertex(Cube.verts, 1.0f, 0.0f, 0.0f);
	addVertex(Cube.verts, 0.0f, 0.0f, 1.0f);
	addVertex(Cube.verts, 0.0f, 0.0f, 0.0f);
	addVertex(Cube.verts, 1.0f, 1.0f, 1.0f);
	addVertex(Cube.verts, 1.0f, 1.0f, 0.0f);
	addVertex(Cube.verts, 0.0f, 1.0f, 1.0f);
	addVertex(Cube.verts, 0.0f, 1.0f, 0.0f);
	addTriangle(Cube.inds, 0, 1, 3);
	addTriangle(Cube.inds, 0, 1, 2);
	addTriangle(Cube.inds, 4, 5, 6);
	addTriangle(Cube.inds, 4, 5, 7);
	addTriangle(Cube.inds, 1, 3, 7);
	addTriangle(Cube.inds, 1, 3, 5);
	addTriangle(Cube.inds, 0, 2, 4);
	addTriangle(Cube.inds, 0, 2, 6);
	addTriangle(Cube.inds, 0, 1, 4);
	addTriangle(Cube.inds, 0, 1, 5);
	addTriangle(Cube.inds, 2, 3, 6);
	addTriangle(Cube.inds, 2, 3, 7);
	BodyList.first.push_back(Cube);
	BodyList.second.push_back("Cube");
}

void bodies::addPyramid()
{
}

void bodies::addSphere()
{
}

void bodies::generateSTL(int BodyIndex)
{
	Body body = BodyList.first.at(BodyIndex);
	std::string filepath = saveFileDialog();

	std::ofstream file(filepath.c_str(), std::ios::binary);

	uint32_t triangleCount = body.inds.size() / 3;

	file.write(	"Binary STL-file generated by ToffCAD", 80);
	file.write(reinterpret_cast<const char*>(&triangleCount), sizeof(uint32_t));

	float normal[3];
	float p1[3];
	float p2[3];
	float p3[3];
	for (int i = 0; i < triangleCount; i+=3)
	{
		p1[0] = body.verts[6 * body.inds[i * 3 + 0] + 0];
		p1[1] = body.verts[6 * body.inds[i * 3 + 0] + 1];
		p1[2] = body.verts[6 * body.inds[i * 3 + 0] + 2];
		p2[0] = body.verts[6 * body.inds[i * 3 + 1] + 0];
		p2[1] = body.verts[6 * body.inds[i * 3 + 1] + 1];
		p2[2] = body.verts[6 * body.inds[i * 3 + 1] + 2];
		p3[0] = body.verts[6 * body.inds[i * 3 + 2] + 0];
		p3[1] = body.verts[6 * body.inds[i * 3 + 2] + 1];
		p3[2] = body.verts[6 * body.inds[i * 3 + 2] + 2];
		getNormal(&normal[0], p1, p2, p3);
		file.write(reinterpret_cast<const char*>(&normal), 12);
		file.write(reinterpret_cast<const char*>(&p1), 12);
		file.write(reinterpret_cast<const char*>(&p2), 12);
		file.write(reinterpret_cast<const char*>(&p2), 12);
		file.write("00", 2);
	}
	file.close();
}

void bodies::saveTCAD()
{
	std::string filepath = saveFileDialog();
	std::ofstream file(filepath.c_str(), std::ios::binary);

	uint32_t vertexCount = 0;
	for (auto& body : BodyList.first)
	{
		vertexCount += body.inds.size();
	}
	file.write(reinterpret_cast<const char*>(&vertexCount), sizeof(uint32_t));

	uint8_t bodyCount = BodyList.first.size();
	file.write(reinterpret_cast<char*>(&bodyCount), sizeof(uint8_t));

	for (auto& bodyName : BodyList.second)
	{
		file.write(reinterpret_cast<const char*>(&bodyName), 40);
	}

	for (auto& body : BodyList.first)
	{
		for (auto& vertex : body.verts)
		{
			file.write(reinterpret_cast<const char*>(&vertex), sizeof(float));
		}
	}

	uint32_t bodyIndicesCount;
	uint32_t error = 0;
	for (auto& body : BodyList.first)
	{
		bodyIndicesCount = body.inds.size();
		file.write(reinterpret_cast<const char*>(&bodyIndicesCount), sizeof(uint32_t));
		for (int i = 0; i < bodyIndicesCount; i++)
		{
			file.write(reinterpret_cast<const char*>(&body.inds[i] - error), sizeof(uint32_t));
		}
		error += bodyIndicesCount;
	}
	file.close();
}

void bodies::openTCAD()
{
	BodyList.first.clear();
	BodyList.second.clear();
	std::string filepath = openExplorerDialog();
	std::ifstream file(filepath.c_str(), std::ios::binary);

	uint32_t vertexCount;
	uint8_t bodyCount;

	file.read(reinterpret_cast<char*>(&vertexCount), 4);
	file.read(reinterpret_cast<char*>(&bodyCount), 1);

	BodyList.second.shrink_to_fit();
	for (short i = 0; i < bodyCount; i++)
	{
		BodyList.second.push_back(" ");
		file.read(reinterpret_cast<char*>(&BodyList.second[i]), 40);
	}

	std::vector<float> vertexList;
	for (int i = 0; i < vertexCount; i++)
	{
		vertexList.push_back(0.0f);
		file.read(reinterpret_cast<char*>(&vertexList[i]), 4);
	}

	BodyList.first.shrink_to_fit();
	for (short i = 0; i < bodyCount; i++)
	{
		BodyList.first.push_back(NULL);
		file.read(reinterpret_cast<char*>(&vertexCount), 4);
		for (int j = 0; j < vertexCount; j++)
		{
			BodyList.first[i].inds.push_back(0);
			file.read(reinterpret_cast<char*>(&BodyList.first[i].inds[j]), 4);
		}
	}

	uint32_t error = 0;
	for (short i = 0; i < bodyCount; i++)
	{
		for (auto& itr : BodyList.first[i].inds)
		{
			//code
		}
	}
}
